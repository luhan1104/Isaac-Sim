#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50001.99977302552, 1.3015899931959032, 0.9508047677508474)
                double radius = 5.11392822265625
            }
            dictionary Perspective = {
                double3 position = (4.265811484452563, -1.5437185512425802, 5.341400234984074)
                double3 target = (-0.6659359174594863, 7.488110925688449, -3.4685538069366375)
            }
            dictionary Right = {
                double3 position = (1.9997730255288708, -49998.63051239512, 1.465694989625971)
                double radius = 6.029015731811524
            }
            dictionary Top = {
                double3 position = (4.301348756579813, 1.306490779673566, 50001.408020622206)
                double radius = 8.221968078613282
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            int "rtx:externalFrameCounter" = 8689088
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def "forklift_b" (
        instanceable = false
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.0/Isaac/Robots/Forklift/forklift_b.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (2, 2, 4.1040908627110184e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "body"
        {
            token visibility = "inherited"

            over "SM_Forklift_BodyDecal_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_BodyGlass_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_Body_B01_01"
            {
                token visibility = "inherited"
            }

            over "SM_Forklift_RightChainWheel_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_CenterChain_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LeftChainWheel_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_RightHose_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LeftHose_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_HoseWheel_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_CenterChainWheel_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_OperatorCabTopWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_OperatorCabBotWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LiftBotWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LiftTopWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_MastTopWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_MastBottomWheels_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_CenterHydralicLift_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_HydraulicSystem_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LeftChain_B01_01"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_RightChain_B01_01"
            {
                token visibility = "invisible"
            }
        }

        over "lift"
        {
            token visibility = "inherited"
        }

        over "back_wheel_swivel"
        {
        }

        over "roller_front_right"
        {
            over "Cylinder"
            {
                token visibility = "invisible"
            }

            over "SM_Forklift_LeadWheelsFrontRight_B01_01"
            {
                token visibility = "inherited"
            }
        }

        over "roller_back_left"
        {
            over "Cylinder_01"
            {
                token visibility = "inherited"
            }

            over "SM_Forklift_LeadWheelsBackLeft_B01_01"
            {
                token visibility = "invisible"
            }
        }

        over "roller_back_right"
        {
        }

        over "roller_front_left"
        {
        }

        over "back_wheel"
        {
            over "SM_Forklift_BackWheel_B01_01"
            {
                token visibility = "invisible"
            }

            over "Cylinder"
            {
                token visibility = "inherited"
            }
        }

        over "back_wheel_joints"
        {
            over "back_wheel_drive"
            {
                float drive:angular:physics:targetVelocity = 0
            }

            over "back_wheel_swivel"
            {
                float drive:angular:physics:targetVelocity = 0
            }
        }
    }

    def OmniGraph "ActionGraph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 5)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 1
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1606.517, 463.89075)
        }

        def OmniGraphNode "ros1_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom uint64 inputs:queueSize = 10
            custom string inputs:topicName = "cmd_vel_test"
            token node:type = "omni.isaac.ros_bridge.ROS1SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity = (0, 0, 0)
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity = (0, 0, 0)
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1257.4937, 676.71985)
        }

        def OmniGraphNode "break_3_vector" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/ros1_subscribe_twist.outputs:angularVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-960.0395, 619.2137)
        }

        def OmniGraphNode "break_3_vector_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/ros1_subscribe_twist.outputs:linearVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-953.2514, 922.2275)
        }

        def OmniGraphNode "constant_token" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "back_wheel_drive"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1077.8243, 310.3726)
        }

        def OmniGraphNode "make_array" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int inputs:arraySize = 2
            custom token inputs:arrayType = "auto" (
                allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
            )
            custom token inputs:input0
            delete token inputs:input0.connect = </World/ActionGraph/constant_token.inputs:value>
            prepend token inputs:input0.connect = </World/ActionGraph/constant_token.inputs:value>
            custom token inputs:input1 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input1.connect = </World/ActionGraph/constant_token_01.inputs:value>
            prepend token inputs:input1.connect = </World/ActionGraph/constant_token_01.inputs:value>
            token node:type = "omni.graph.nodes.ConstructArray"
            int node:typeVersion = 1
            custom token outputs:array
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-718.7632, 309.2723)
        }

        def OmniGraphNode "constant_token_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "back_wheel_swivel"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1054.6709, 422.7136)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand = []
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/ros1_subscribe_twist.outputs:execOut>
            custom int[] inputs:jointIndices = []
            custom token[] inputs:jointNames = []
            prepend token[] inputs:jointNames.connect = </World/ActionGraph/make_array.outputs:array>
            custom double[] inputs:positionCommand = []
            custom string inputs:robotPath = ""
            custom rel inputs:targetPrim
            delete rel inputs:targetPrim = </World/forklift_b/body>
            prepend rel inputs:targetPrim = </World/forklift_b>
            custom bool inputs:usePath = 0
            custom double[] inputs:velocityCommand = []
            prepend double[] inputs:velocityCommand.connect = </World/ActionGraph/make_array_01.outputs:array>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-286.54556, 539.7977)
        }

        def OmniGraphNode "make_array_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int inputs:arraySize = 2
            custom token inputs:arrayType = "auto" (
                allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
            )
            custom token inputs:input0
            prepend token inputs:input0.connect = </World/ActionGraph/break_3_vector_01.outputs:x>
            custom token inputs:input1 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            delete token inputs:input1.connect = </World/ActionGraph/break_3_vector.outputs:z>
            prepend token inputs:input1.connect = </World/ActionGraph/break_3_vector.outputs:z>
            token node:type = "omni.graph.nodes.ConstructArray"
            int node:typeVersion = 1
            custom token outputs:array
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-614.21594, 742.1261)
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

