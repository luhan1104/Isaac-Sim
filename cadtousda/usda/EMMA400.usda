#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50456.56979181362, -0.548401423284884, 1.4145745141380683)
                double radius = 2.7694589614868166
            }
            dictionary Perspective = {
                double3 position = (3.083319727136638, 3.6795984675512594, 4.1644718957274485)
                double3 target = (-3.7833856646883013, -4.124451918403077, -5.132679033573563)
            }
            dictionary Right = {
                double3 position = (-2.852495922321238, -50000.104693155285, 3.300586149640035)
                double radius = 9.016798400878907
            }
            dictionary Top = {
                double3 position = (-18.241096598169605, 26.077211453506578, 50000.89615856471)
                double radius = 52.283685302734376
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            bool excludeRigidBodies = 1
            float height = 1
            float maxClimb = 0.5
            float maxSlope = 61.75
            float radius = 0.5
            uint64 ver = 28
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            int "rtx:externalFrameCounter" = 16829656
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 10000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 120
    upAxis = "Z"
)

def Xform "World"
{
    custom string cmd_path = "/home/liufeng/isaac_test/lh/pc.txt"

    over "EMMA400K_body" (
        prepend references = @../../lh/urdf/EMMA400K_body/urdf/EMMA400K_body/EMMA400K_body.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "base_link"
        {
            float physics:mass = 70

            def Lidar "Lidar"
            {
                bool drawLines = 0
                bool drawPoints = 0
                bool enabled = 1
                bool enableSemantics = 0
                bool highLod = 0
                float horizontalFov = 178
                float horizontalResolution = 0.4
                float maxRange = 50
                float minRange = 0.4
                float rotationRate = 20
                float verticalFov = 30
                float verticalResolution = 4
                double3 xformOp:rotateXYZ
                double3 xformOp:translate = (0.38, 0, 0.12)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
                float yawOffset = 0
            }

            def IsaacImuSensor "Imu_Sensor"
            {
                bool enabled = 1
                float sensorPeriod = -1
                token visibility = "invisible"
                bool visualize = 0
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0.08)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Camera "car_camera"
            {
                float2 clippingRange = (0.09, 10000)
                float focalLength = 2
                float focusDistance = 0.2
                float fStop = 0
                float horizontalAperture = 5
                custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -100)
                token projection = "perspective"
                float verticalAperture = 5
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "collisions" (
                prepend apiSchemas = ["PhysxCookedDataAPI:convexHull"]
            )
            {
                uchar[] physxCookedData:convexHull:buffer = [9, 35, 81, 102, 236, 224, 240, 238, 20, 168, 207, 236, 127, 48, 185, 231, 2, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 36, 0, 0, 0, 97, 128, 0, 0, 63, 0, 0, 0, 194, 0, 0, 0, 209, 135, 191, 62, 77, 74, 127, 190, 234, 128, 199, 188, 41, 109, 172, 190, 188, 20, 135, 190, 253, 9, 201, 188, 218, 199, 185, 190, 25, 6, 131, 62, 253, 9, 201, 188, 170, 173, 172, 62, 24, 231, 135, 62, 70, 127, 188, 188, 194, 219, 210, 62, 116, 219, 55, 62, 195, 100, 170, 188, 182, 156, 210, 190, 150, 48, 56, 190, 218, 8, 191, 188, 69, 252, 206, 62, 71, 182, 62, 62, 22, 158, 57, 62, 241, 68, 207, 62, 20, 136, 59, 190, 39, 193, 56, 62, 96, 99, 210, 190, 113, 241, 69, 62, 244, 102, 177, 188, 43, 135, 214, 190, 190, 167, 1, 178, 203, 16, 7, 62, 121, 117, 206, 190, 153, 201, 77, 62, 59, 223, 47, 62, 222, 246, 205, 190, 192, 133, 77, 190, 217, 206, 55, 62, 44, 71, 210, 62, 237, 72, 70, 190, 159, 171, 173, 188, 58, 144, 186, 62, 54, 211, 111, 190, 133, 235, 81, 62, 34, 0, 177, 190, 241, 145, 121, 190, 133, 235, 81, 62, 81, 0, 177, 62, 109, 185, 131, 190, 217, 206, 55, 62, 57, 180, 200, 190, 236, 81, 56, 62, 133, 235, 81, 62, 4, 136, 197, 190, 192, 170, 119, 190, 159, 171, 173, 188, 18, 160, 197, 62, 251, 120, 119, 62, 195, 100, 170, 188, 62, 56, 197, 62, 3, 210, 111, 62, 59, 223, 47, 62, 57, 180, 200, 190, 236, 81, 56, 190, 133, 235, 81, 62, 57, 180, 200, 62, 236, 81, 56, 62, 133, 235, 81, 62, 62, 96, 229, 187, 38, 49, 136, 62, 53, 214, 24, 62, 190, 105, 165, 62, 15, 130, 136, 190, 159, 171, 173, 188, 162, 185, 195, 190, 99, 248, 114, 190, 59, 223, 47, 62, 153, 243, 199, 62, 193, 18, 105, 190, 59, 223, 47, 62, 102, 102, 166, 190, 203, 161, 133, 190, 59, 223, 47, 62, 57, 180, 200, 62, 236, 81, 56, 190, 133, 235, 81, 62, 34, 0, 177, 62, 241, 145, 121, 62, 133, 235, 81, 62, 34, 0, 177, 190, 241, 145, 121, 62, 133, 235, 81, 62, 102, 102, 166, 62, 202, 161, 133, 62, 59, 223, 47, 62, 102, 102, 166, 190, 184, 30, 133, 62, 217, 206, 55, 62, 204, 112, 189, 190, 17, 73, 125, 62, 59, 223, 47, 62, 42, 101, 195, 190, 211, 115, 98, 62, 23, 217, 78, 62, 152, 83, 202, 190, 177, 196, 108, 62, 159, 171, 173, 188, 42, 101, 195, 62, 211, 115, 98, 62, 23, 217, 78, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 134, 235, 81, 190, 0, 0, 8, 1, 65, 25, 138, 57, 159, 197, 93, 55, 254, 255, 127, 191, 163, 72, 200, 188, 8, 0, 3, 20, 5, 156, 17, 61, 236, 204, 168, 59, 180, 213, 127, 191, 166, 229, 20, 189, 11, 0, 3, 20, 124, 216, 12, 59, 14, 34, 53, 59, 153, 255, 127, 191, 147, 113, 200, 188, 14, 0, 3, 14, 186, 38, 142, 188, 178, 71, 100, 186, 28, 246, 127, 191, 92, 195, 250, 188, 17, 0, 3, 21, 45, 210, 127, 63, 4, 110, 185, 58, 59, 9, 25, 61, 115, 113, 210, 190, 20, 0, 3, 9, 62, 194, 134, 189, 9, 85, 148, 59, 77, 113, 127, 191, 58, 215, 74, 189, 23, 0, 3, 27, 57, 171, 127, 191, 41, 39, 183, 58, 155, 49, 80, 189, 98, 209, 210, 190, 26, 0, 3, 7, 197, 46, 127, 191, 37, 44, 145, 61, 34, 131, 22, 61, 30, 83, 216, 190, 29, 0, 3, 12, 5, 30, 127, 191, 209, 31, 152, 189, 0, 114, 23, 61, 5, 73, 216, 190, 32, 0, 3, 4, 146, 227, 127, 63, 143, 12, 73, 187, 153, 246, 239, 60, 74, 44, 210, 190, 35, 0, 3, 9, 124, 56, 173, 61, 186, 158, 84, 58, 37, 21, 127, 191, 245, 41, 100, 189, 38, 0, 3, 20, 169, 158, 35, 60, 15, 194, 62, 191, 247, 180, 42, 63, 162, 52, 161, 190, 41, 0, 3, 2, 190, 8, 114, 191, 9, 210, 28, 60, 20, 186, 166, 62, 222, 208, 224, 190, 44, 0, 3, 12, 254, 167, 112, 191, 206, 199, 37, 59, 72, 150, 174, 62, 173, 178, 224, 190, 47, 0, 3, 12, 66, 177, 108, 191, 21, 16, 195, 190, 121, 109, 19, 59, 146, 201, 229, 190, 50, 0, 3, 4, 5, 239, 207, 189, 184, 41, 155, 189, 0, 240, 125, 191, 64, 209, 160, 189, 53, 0, 3, 28, 42, 159, 104, 61, 237, 142, 193, 60, 229, 131, 127, 191, 152, 54, 70, 189, 56, 0, 3, 20, 206, 108, 109, 63, 33, 33, 191, 62, 73, 28, 183, 60, 68, 163, 229, 190, 59, 0, 3, 5, 183, 81, 108, 63, 134, 162, 196, 62, 153, 54, 153, 60, 24, 193, 229, 190, 62, 0, 3, 17, 126, 151, 223, 62, 139, 27, 102, 63, 29, 63, 22, 61, 89, 34, 197, 190, 65, 0, 3, 17, 143, 115, 109, 191, 0, 0, 0, 0, 64, 87, 191, 62, 4, 99, 225, 190, 68, 0, 3, 4, 76, 120, 33, 191, 39, 161, 234, 190, 127, 80, 32, 63, 252, 141, 234, 190, 71, 0, 3, 18, 111, 103, 99, 63, 178, 168, 149, 57, 91, 37, 235, 62, 24, 132, 226, 190, 74, 0, 3, 5, 223, 201, 93, 188, 216, 219, 127, 63, 93, 120, 248, 188, 248, 216, 133, 190, 77, 0, 3, 23, 74, 103, 136, 59, 135, 170, 67, 190, 227, 71, 123, 191, 26, 181, 149, 189, 80, 0, 3, 29, 62, 191, 164, 62, 133, 96, 114, 191, 243, 60, 255, 59, 110, 98, 182, 190, 83, 0, 3, 2, 178, 228, 95, 191, 67, 219, 247, 190, 112, 66, 225, 60, 2, 104, 232, 190, 86, 0, 3, 18, 170, 102, 208, 190, 249, 182, 105, 191, 170, 190, 238, 60, 153, 35, 193, 190, 89, 0, 3, 3, 29, 205, 34, 191, 93, 238, 243, 190, 44, 108, 27, 63, 135, 188, 235, 190, 92, 0, 3, 18, 245, 4, 16, 63, 28, 80, 70, 191, 205, 222, 147, 62, 45, 41, 228, 190, 95, 0, 3, 2, 207, 132, 14, 63, 208, 88, 84, 191, 240, 164, 56, 61, 218, 241, 211, 190, 98, 0, 3, 2, 48, 239, 85, 63, 42, 148, 12, 191, 57, 239, 24, 188, 243, 68, 230, 190, 101, 0, 3, 34, 40, 215, 114, 63, 195, 120, 160, 190, 13, 27, 52, 61, 154, 16, 230, 190, 104, 0, 3, 8, 40, 176, 207, 185, 246, 46, 99, 191, 72, 255, 235, 62, 46, 48, 159, 190, 107, 0, 3, 3, 198, 113, 190, 190, 252, 226, 101, 191, 159, 177, 112, 62, 155, 144, 202, 190, 110, 0, 3, 3, 37, 206, 195, 190, 149, 91, 108, 191, 18, 116, 20, 61, 219, 51, 190, 190, 113, 0, 3, 3, 234, 212, 140, 187, 87, 248, 127, 191, 251, 105, 112, 60, 52, 159, 135, 190, 116, 0, 3, 3, 104, 114, 164, 59, 253, 185, 127, 191, 223, 40, 60, 61, 153, 177, 136, 190, 119, 0, 3, 3, 121, 246, 98, 63, 0, 0, 0, 0, 82, 216, 236, 62, 246, 125, 226, 190, 122, 0, 3, 5, 28, 171, 66, 63, 127, 96, 198, 190, 113, 108, 5, 63, 20, 8, 243, 190, 125, 0, 3, 34, 78, 140, 79, 63, 166, 31, 180, 190, 97, 146, 239, 62, 142, 64, 244, 190, 128, 0, 3, 34, 236, 113, 92, 60, 204, 231, 127, 63, 143, 106, 193, 60, 211, 229, 137, 190, 131, 0, 3, 1, 110, 82, 203, 62, 158, 85, 100, 63, 221, 109, 93, 62, 20, 73, 204, 190, 134, 0, 3, 1, 112, 6, 208, 62, 189, 157, 105, 63, 7, 230, 61, 61, 248, 161, 193, 190, 137, 0, 3, 1, 248, 48, 167, 188, 171, 233, 127, 63, 226, 76, 133, 188, 170, 249, 134, 190, 140, 0, 3, 23, 61, 24, 141, 190, 212, 243, 117, 63, 32, 113, 2, 61, 135, 173, 176, 190, 143, 0, 3, 23, 172, 75, 157, 190, 28, 59, 101, 63, 49, 248, 164, 62, 227, 238, 199, 190, 146, 0, 3, 0, 0, 0, 0, 0, 47, 199, 87, 63, 181, 192, 9, 63, 103, 168, 161, 190, 149, 0, 3, 23, 54, 150, 134, 59, 80, 108, 99, 63, 14, 16, 235, 62, 52, 197, 159, 190, 152, 0, 3, 1, 170, 154, 114, 58, 167, 158, 122, 63, 33, 213, 80, 62, 55, 233, 148, 190, 155, 0, 3, 23, 117, 147, 0, 191, 64, 98, 61, 63, 253, 61, 229, 62, 234, 52, 228, 190, 158, 0, 3, 0, 146, 90, 76, 191, 23, 112, 18, 63, 69, 36, 65, 62, 57, 64, 240, 190, 161, 0, 3, 0, 183, 227, 91, 191, 31, 15, 127, 62, 201, 18, 229, 62, 10, 79, 242, 190, 164, 0, 3, 12, 59, 147, 26, 190, 92, 156, 224, 61, 22, 129, 123, 63, 93, 133, 143, 190, 167, 0, 3, 0, 151, 100, 108, 191, 190, 52, 196, 62, 180, 210, 175, 60, 197, 246, 231, 190, 170, 0, 3, 12, 99, 191, 79, 191, 173, 222, 20, 63, 138, 114, 106, 61, 163, 105, 232, 190, 173, 0, 3, 0, 218, 46, 27, 191, 223, 147, 75, 63, 2, 73, 78, 60, 7, 167, 216, 190, 176, 0, 3, 0, 148, 11, 38, 190, 194, 28, 162, 61, 66, 204, 123, 191, 148, 107, 211, 189, 179, 0, 3, 27, 57, 147, 26, 62, 89, 156, 224, 61, 21, 129, 123, 63, 92, 133, 143, 190, 182, 0, 3, 17, 222, 69, 85, 63, 145, 248, 123, 62, 93, 162, 253, 62, 221, 224, 241, 190, 185, 0, 3, 5, 199, 120, 95, 63, 13, 214, 205, 62, 38, 123, 141, 62, 156, 170, 244, 190, 188, 0, 3, 17, 113, 83, 3, 63, 73, 182, 67, 63, 229, 220, 199, 62, 128, 43, 227, 190, 191, 0, 3, 17, 27, 21, 28, 29, 16, 20, 14, 13, 0, 1, 2, 3, 4, 0, 3, 0, 2, 5, 2, 1, 6, 7, 4, 8, 2, 5, 8, 5, 9, 8, 9, 10, 11, 9, 5, 12, 4, 7, 12, 0, 4, 13, 14, 15, 16, 10, 9, 16, 9, 11, 17, 11, 5, 17, 5, 1, 18, 4, 3, 19, 6, 4, 19, 4, 18, 19, 18, 3, 20, 16, 11, 20, 11, 14, 21, 7, 6, 22, 3, 2, 23, 1, 0, 23, 0, 15, 24, 11, 17, 24, 17, 1, 24, 14, 11, 25, 13, 15, 25, 15, 0, 25, 0, 12, 25, 12, 7, 26, 15, 14, 26, 14, 24, 26, 24, 1, 26, 1, 23, 26, 23, 15, 27, 7, 21, 27, 13, 25, 27, 25, 7, 30, 3, 22, 30, 28, 19, 30, 19, 3, 31, 22, 2, 31, 2, 32, 31, 32, 29, 31, 29, 28, 31, 28, 30, 31, 30, 22, 33, 29, 32, 33, 32, 10, 33, 10, 16, 33, 16, 29, 34, 8, 10, 34, 10, 32, 34, 32, 2, 34, 2, 8, 35, 28, 21, 35, 21, 6, 35, 6, 19, 35, 19, 28, 0, 39, 0, 59, 0, 48, 0, 54, 0, 21, 0, 22, 0, 12, 0, 40, 1, 25, 1, 4, 1, 3, 2, 17, 2, 11, 2, 3, 3, 24, 4, 6, 4, 16, 5, 23, 5, 10, 5, 18, 6, 58, 6, 7, 7, 9, 7, 8, 8, 13, 8, 55, 9, 14, 9, 15, 10, 11, 10, 33, 11, 32, 12, 34, 12, 30, 13, 53, 13, 14, 14, 21, 15, 27, 15, 16, 16, 28, 17, 19, 17, 20, 18, 61, 18, 19, 19, 20, 20, 44, 21, 22, 22, 29, 23, 39, 23, 60, 24, 42, 24, 45, 25, 37, 25, 26, 26, 31, 26, 38, 27, 29, 27, 28, 28, 36, 29, 35, 30, 40, 30, 31, 31, 32, 32, 33, 33, 41, 34, 38, 34, 35, 35, 36, 36, 37, 37, 38, 39, 41, 40, 41, 42, 44, 42, 50, 43, 49, 43, 62, 43, 44, 45, 50, 45, 46, 46, 57, 46, 47, 47, 51, 47, 48, 48, 49, 49, 50, 51, 54, 51, 52, 52, 56, 52, 53, 53, 54, 55, 58, 55, 56, 56, 57, 57, 58, 59, 62, 59, 60, 60, 61, 61, 62, 1, 2, 3, 1, 4, 16, 1, 3, 4, 2, 3, 17, 2, 5, 10, 4, 6, 7, 5, 18, 23, 5, 10, 23, 6, 7, 8, 7, 8, 9, 8, 13, 52, 9, 14, 15, 10, 11, 32, 0, 12, 30, 0, 12, 22, 12, 26, 30, 0, 13, 14, 15, 16, 27, 17, 19, 20, 18, 19, 20, 0, 21, 22, 0, 23, 39, 24, 42, 45, 25, 26, 37, 27, 28, 29, 30, 31, 32, 34, 35, 36, 0, 39, 40, 0, 43, 48, 0, 47, 48, 42, 43, 44, 45, 46, 47, 46, 47, 51, 51, 52, 53, 55, 56, 57, 59, 60, 61, 27, 0, 21, 0, 21, 0, 28, 0, 28, 0, 29, 0, 29, 0, 16, 0, 16, 0, 20, 0, 20, 0, 14, 0, 14, 0, 13, 0, 13, 0, 27, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 3, 0, 4, 0, 4, 0, 0, 0, 0, 0, 3, 0, 2, 0, 3, 0, 5, 0, 2, 0, 1, 0, 5, 0, 6, 0, 7, 0, 7, 0, 4, 0, 4, 0, 6, 0, 8, 0, 2, 0, 5, 0, 8, 0, 5, 0, 9, 0, 9, 0, 8, 0, 9, 0, 10, 0, 10, 0, 8, 0, 11, 0, 9, 0, 5, 0, 11, 0, 12, 0, 4, 0, 7, 0, 12, 0, 12, 0, 0, 0, 14, 0, 15, 0, 15, 0, 13, 0, 16, 0, 10, 0, 9, 0, 16, 0, 11, 0, 16, 0, 17, 0, 11, 0, 5, 0, 17, 0, 1, 0, 17, 0, 18, 0, 4, 0, 3, 0, 18, 0, 19, 0, 6, 0, 4, 0, 19, 0, 18, 0, 19, 0, 3, 0, 19, 0, 11, 0, 20, 0, 11, 0, 14, 0, 21, 0, 7, 0, 6, 0, 21, 0, 22, 0, 3, 0, 2, 0, 22, 0, 23, 0, 1, 0, 0, 0, 23, 0, 0, 0, 15, 0, 15, 0, 23, 0, 24, 0, 11, 0, 17, 0, 24, 0, 1, 0, 24, 0, 24, 0, 14, 0, 25, 0, 13, 0, 15, 0, 25, 0, 0, 0, 25, 0, 12, 0, 25, 0, 7, 0, 25, 0, 26, 0, 15, 0, 14, 0, 26, 0, 24, 0, 26, 0, 1, 0, 26, 0, 23, 0, 26, 0, 27, 0, 7, 0, 25, 0, 27, 0, 30, 0, 3, 0, 22, 0, 30, 0, 30, 0, 28, 0, 28, 0, 19, 0, 19, 0, 30, 0, 31, 0, 22, 0, 2, 0, 31, 0, 2, 0, 32, 0, 32, 0, 31, 0, 32, 0, 29, 0, 29, 0, 31, 0, 28, 0, 31, 0, 30, 0, 31, 0, 33, 0, 29, 0, 32, 0, 33, 0, 32, 0, 10, 0, 10, 0, 33, 0, 16, 0, 33, 0, 34, 0, 8, 0, 10, 0, 34, 0, 32, 0, 34, 0, 2, 0, 34, 0, 35, 0, 28, 0, 21, 0, 35, 0, 6, 0, 35, 0, 19, 0, 35, 0, 0, 0, 0, 0, 42, 135, 214, 190, 14, 130, 136, 190, 0, 10, 201, 188, 194, 219, 210, 62, 38, 49, 136, 62, 133, 235, 81, 62, 201, 224, 196, 61, 163, 211, 88, 59, 169, 239, 186, 182, 61, 63, 19, 55, 169, 239, 186, 182, 13, 141, 208, 59, 201, 132, 217, 182, 61, 63, 19, 55, 201, 132, 217, 182, 44, 142, 239, 59, 160, 68, 154, 186, 0, 122, 102, 184, 70, 206, 182, 61, 0, 0, 128, 63, 73, 67, 69, 1, 83, 85, 80, 77, 0, 0, 0, 0, 73, 67, 69, 1, 71, 65, 85, 83, 0, 0, 0, 0, 16, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 13, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 25, 25, 25, 25, 25, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 25, 25, 25, 25, 25, 27, 27, 27, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 27, 27, 27, 27, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 27, 27, 27, 27, 12, 12, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 27, 27, 27, 27, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 21, 21, 21, 21, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 21, 21, 21, 21, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 35, 35, 35, 35, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 35, 35, 35, 35, 35, 35, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 35, 35, 35, 35, 35, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 35, 35, 35, 35, 35, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 35, 35, 35, 35, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 35, 35, 35, 35, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 14, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 14, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 14, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 11, 11, 11, 11, 11, 20, 17, 17, 17, 17, 17, 17, 17, 17, 11, 11, 11, 11, 11, 11, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 11, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 9, 11, 11, 20, 20, 20, 20, 20, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 10, 10, 10, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 10, 10, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 32, 32, 32, 32, 33, 33, 33, 33, 34, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 34, 34, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 18, 18, 18, 18, 32, 32, 32, 32, 32, 32, 31, 31, 30, 30, 30, 19, 19, 19, 19, 19, 32, 32, 32, 32, 32, 32, 31, 31, 30, 30, 30, 19, 19, 19, 19, 19, 32, 32, 32, 32, 32, 31, 31, 31, 30, 30, 28, 28, 19, 19, 19, 19, 32, 32, 32, 32, 29, 29, 31, 31, 30, 28, 28, 28, 28, 19, 19, 19, 33, 33, 33, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 35, 35, 35, 33, 33, 33, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 35, 35, 35, 33, 33, 33, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 35, 35, 35, 33, 33, 33, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 35, 35, 35, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 1, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 1, 1, 1, 23, 23, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 1, 1, 1, 23, 23, 23, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 26, 26, 26, 15, 15, 15, 15, 15, 25, 25, 25, 24, 24, 24, 24, 24, 26, 26, 26, 15, 15, 15, 15, 15, 25, 25, 25, 24, 24, 24, 24, 14, 14, 26, 26, 15, 15, 15, 15, 15, 25, 25, 25, 24, 24, 24, 14, 14, 14, 14, 26, 15, 15, 15, 15, 13, 13, 25, 25, 24, 24, 24, 14, 14, 14, 14, 14, 15, 15, 15, 13, 13, 13, 13, 13, 24, 24, 14, 14, 14, 14, 14, 14, 15, 15, 13, 13, 13, 13, 13, 13, 24, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 20, 20, 20, 20, 20, 16, 16, 33, 33, 33, 33, 33, 33, 14, 14, 14, 20, 20, 20, 20, 20, 16, 16, 33, 33, 33, 33, 33, 33, 14, 14, 14, 14, 20, 20, 20, 20, 16, 16, 33, 33, 33, 33, 33, 33, 14, 14, 14, 14, 14, 20, 20, 20, 16, 16, 33, 33, 33, 33, 29, 29, 14, 14, 14, 14, 14, 20, 20, 20, 16, 33, 33, 33, 33, 29, 29, 29, 14, 14, 14, 14, 14, 14, 20, 20, 16, 33, 33, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 20, 16, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 29, 29, 29, 13, 13, 13, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 28, 28, 28, 13, 13, 13, 13, 13, 13, 13, 27, 21, 28, 28, 28, 28, 28, 28, 28, 13, 13, 13, 13, 13, 13, 13, 27, 21, 35, 35, 28, 28, 28, 28, 28, 13, 13, 13, 13, 13, 13, 27, 27, 21, 35, 35, 35, 35, 28, 28, 28, 13, 13, 13, 13, 13, 13, 27, 27, 21, 21, 35, 35, 35, 35, 28, 28, 13, 13, 13, 13, 13, 27, 27, 27, 21, 21, 35, 35, 35, 35, 35, 35, 13, 13, 13, 13, 13, 27, 27, 27, 21, 21, 35, 35, 35, 35, 35, 35, 13, 13, 13, 13, 27, 27, 27, 27, 21, 21, 35, 35, 35, 35, 35, 35, 17, 17, 17, 17, 17, 5, 5, 5, 8, 8, 8, 34, 34, 34, 34, 34, 17, 17, 17, 17, 17, 5, 5, 5, 8, 8, 8, 34, 34, 34, 34, 2, 17, 17, 17, 17, 17, 5, 5, 5, 8, 8, 34, 34, 34, 34, 2, 2, 17, 17, 17, 17, 17, 17, 5, 5, 8, 8, 34, 34, 34, 2, 2, 2, 1, 17, 17, 17, 17, 17, 5, 5, 8, 8, 34, 34, 2, 2, 2, 2, 1, 1, 1, 1, 17, 17, 17, 5, 8, 34, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 17, 5, 8, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 23, 23, 23, 23, 23, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 23, 23, 0, 0, 0, 0, 0, 12, 4, 18, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 12, 4, 18, 18, 18, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 12, 12, 4, 18, 18, 18, 18, 18, 3, 3, 0, 0, 0, 0, 0, 12, 12, 12, 4, 4, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 12, 12, 12, 4, 4, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 12, 12, 12, 12, 4, 4, 4, 18, 18, 18, 18, 18, 0, 0, 0, 12, 12, 12, 12, 12, 4, 4, 4, 18, 18, 18, 18, 18, 33, 33, 33, 33, 32, 32, 32, 32, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 32, 32, 32, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 32, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 10, 10, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 10, 10, 10, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 11, 11, 9, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 20, 20, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 20, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 11, 11, 11, 11, 11, 11, 17, 17, 17, 17, 17, 17, 17, 17, 20, 11, 11, 11, 11, 11, 24, 24, 17, 17, 17, 17, 17, 17, 17, 17, 14, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 17, 17, 17, 17, 17, 14, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 17, 17, 17, 17, 17, 14, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 17, 17, 17, 17, 17, 35, 35, 35, 35, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 35, 35, 35, 35, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 35, 35, 35, 35, 35, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 35, 35, 35, 35, 35, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 35, 35, 35, 35, 35, 35, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 35, 35, 35, 35, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 21, 21, 21, 21, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 21, 21, 21, 21, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 27, 27, 27, 27, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 27, 27, 27, 27, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 27, 27, 27, 27, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12, 12, 27, 27, 27, 25, 25, 25, 25, 25, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 25, 25, 25, 25, 25, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 24, 13, 13, 13, 13, 13, 13, 15, 15, 14, 14, 14, 14, 14, 14, 24, 24, 13, 13, 13, 13, 13, 15, 15, 15, 14, 14, 14, 14, 14, 24, 24, 24, 25, 25, 13, 13, 15, 15, 15, 15, 26, 14, 14, 14, 14, 24, 24, 24, 25, 25, 25, 15, 15, 15, 15, 15, 26, 26, 14, 14, 24, 24, 24, 24, 25, 25, 25, 15, 15, 15, 15, 15, 26, 26, 26, 24, 24, 24, 24, 24, 25, 25, 25, 15, 15, 15, 15, 15, 26, 26, 26, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 23, 23, 23, 1, 1, 1, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 23, 23, 1, 1, 1, 1, 17, 17, 17, 17, 35, 35, 35, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 33, 33, 33, 35, 35, 35, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 33, 33, 33, 35, 35, 35, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 33, 33, 33, 35, 35, 35, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 33, 33, 33, 19, 19, 19, 28, 28, 28, 28, 30, 31, 31, 29, 29, 32, 32, 32, 32, 19, 19, 19, 19, 28, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 32, 19, 19, 19, 19, 19, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 19, 19, 19, 19, 19, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 34, 34, 18, 18, 18, 18, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 34, 18, 18, 18, 18, 18, 4, 4, 4, 12, 12, 12, 12, 12, 0, 0, 0, 18, 18, 18, 18, 18, 4, 4, 4, 12, 12, 12, 12, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 4, 4, 12, 12, 12, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 4, 4, 12, 12, 12, 0, 0, 0, 0, 0, 3, 3, 18, 18, 18, 18, 18, 4, 12, 12, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 18, 18, 18, 4, 12, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 18, 4, 12, 0, 0, 0, 0, 0, 23, 23, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 23, 23, 23, 23, 23, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 8, 5, 17, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 34, 8, 5, 17, 17, 17, 1, 1, 1, 1, 2, 2, 2, 2, 34, 34, 8, 8, 5, 5, 17, 17, 17, 17, 17, 1, 2, 2, 2, 34, 34, 34, 8, 8, 5, 5, 17, 17, 17, 17, 17, 17, 2, 2, 34, 34, 34, 34, 8, 8, 5, 5, 5, 17, 17, 17, 17, 17, 2, 34, 34, 34, 34, 8, 8, 8, 5, 5, 5, 17, 17, 17, 17, 17, 34, 34, 34, 34, 34, 8, 8, 8, 5, 5, 5, 17, 17, 17, 17, 17, 35, 35, 35, 35, 35, 35, 21, 21, 27, 27, 27, 27, 13, 13, 13, 13, 35, 35, 35, 35, 35, 35, 21, 21, 27, 27, 27, 13, 13, 13, 13, 13, 35, 35, 35, 35, 35, 35, 21, 21, 27, 27, 27, 13, 13, 13, 13, 13, 28, 28, 35, 35, 35, 35, 21, 21, 27, 27, 13, 13, 13, 13, 13, 13, 28, 28, 28, 35, 35, 35, 35, 21, 27, 27, 13, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 35, 35, 21, 27, 13, 13, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 28, 28, 21, 27, 13, 13, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 28, 28, 28, 13, 13, 13, 13, 13, 13, 13, 13, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 29, 29, 16, 20, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 33, 33, 16, 20, 20, 14, 14, 14, 14, 14, 14, 29, 29, 29, 33, 33, 33, 33, 16, 20, 20, 20, 14, 14, 14, 14, 14, 29, 29, 33, 33, 33, 33, 16, 16, 20, 20, 20, 14, 14, 14, 14, 14, 33, 33, 33, 33, 33, 33, 16, 16, 20, 20, 20, 20, 14, 14, 14, 14, 33, 33, 33, 33, 33, 33, 16, 16, 20, 20, 20, 20, 20, 14, 14, 14, 33, 33, 33, 33, 33, 33, 16, 16, 20, 20, 20, 20, 20, 14, 14, 14, 73, 67, 69, 1, 86, 65, 76, 69, 2, 0, 0, 0, 36, 0, 0, 0, 194, 0, 0, 0, 9, 0, 0, 0, 8, 7, 9, 7, 7, 6, 5, 6, 5, 5, 6, 7, 4, 4, 6, 6, 6, 4, 3, 7, 3, 5, 4, 4, 5, 6, 5, 4, 6, 5, 5, 6, 6, 4, 4, 4, 1, 23, 15, 25, 12, 4, 3, 2, 2, 5, 17, 24, 26, 23, 0, 0, 3, 22, 31, 32, 34, 8, 5, 1, 4, 18, 19, 30, 22, 2, 0, 0, 12, 7, 6, 19, 18, 3, 2, 8, 9, 11, 17, 1, 7, 21, 35, 19, 4, 4, 12, 25, 27, 21, 6, 2, 34, 10, 9, 5, 8, 10, 16, 11, 5, 8, 34, 32, 33, 16, 9, 9, 16, 20, 14, 24, 17, 5, 4, 0, 25, 7, 27, 25, 15, 14, 13, 15, 26, 24, 11, 20, 13, 25, 0, 23, 26, 14, 20, 11, 9, 10, 33, 29, 11, 24, 1, 5, 4, 19, 3, 6, 35, 28, 30, 3, 18, 4, 14, 11, 16, 28, 35, 6, 7, 27, 3, 30, 31, 2, 1, 26, 15, 0, 11, 14, 26, 1, 17, 13, 27, 7, 12, 0, 15, 15, 23, 1, 24, 14, 21, 7, 25, 13, 29, 31, 30, 19, 35, 21, 16, 33, 32, 31, 28, 3, 19, 28, 31, 22, 22, 30, 28, 29, 32, 2, 31, 29, 33, 10, 34, 2, 29, 16, 10, 32, 8, 2, 32, 10, 28, 19, 6, 21, 0, 0, 128, 191, 152, 224, 232, 61, 23, 46, 208, 62, 168, 115, 134, 61, 168, 115, 134, 61]
            }
        }

        def Cylinder "dwheel_left" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            uniform token axis = "Y"
            float3[] extent = [(-0.09, -0.025, -0.09), (0.09, 0.025, 0.09)]
            double height = 0.05
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double radius = 0.09
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0.26, 0.045)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsRevoluteJoint "wheel_left" (
                prepend apiSchemas = ["PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 10000
                float drive:angular:physics:targetVelocity = 200
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/EMMA400K_body/base_link>
                rel physics:body1 = </World/EMMA400K_body/dwheel_left>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, 0.26, 0.045)
                point3f physics:localPos1 = (0, -9.536743e-9, 1.7881393e-9)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (0.70710677, 0, 0, 0)
            }
        }

        def Cylinder "dwheel_right" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            uniform token axis = "Y"
            float3[] extent = [(-0.09, -0.025, -0.09), (0.09, 0.025, 0.09)]
            double height = 0.05
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double radius = 0.09
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -0.26, 0.045)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsRevoluteJoint "wheel_right" (
                prepend apiSchemas = ["PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 10000
                float drive:angular:physics:targetVelocity = 200
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/EMMA400K_body/base_link>
                rel physics:body1 = </World/EMMA400K_body/dwheel_right>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, -0.26, 0.045)
                point3f physics:localPos1 = (0, 9.536743e-9, 1.7881393e-9)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cylinder "front" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            uniform token axis = "X"
            float3[] extent = [(-0.005, -0.09, -0.09), (0.005, 0.09, 0.09)]
            double height = 0.01
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double radius = 0.09
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            token visibility = "invisible"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.43, 0, 0.045)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/EMMA400K_body/base_link>
                rel physics:body1 = </World/EMMA400K_body/front>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.43, 0, 0.045)
                point3f physics:localPos1 = (7.152557e-9, 0, 1.7881393e-9)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cylinder "back" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            uniform token axis = "X"
            float3[] extent = [(-0.005, -0.09, -0.09), (0.005, 0.09, 0.09)]
            double height = 0.01
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double radius = 0.09
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            token visibility = "invisible"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-0.43, 0, 0.045)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/EMMA400K_body/base_link>
                rel physics:body1 = </World/EMMA400K_body/back>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.43, 0, 0.045)
                point3f physics:localPos1 = (-7.152557e-9, 0, 1.7881393e-9)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def OmniGraph "ActionGraph"
        {
            token evaluator:type = "execution"
            token fabricCacheBacking = "Shared"
            int2 fileFormatVersion = (1, 5)
            token pipelineStage = "pipelineStageSimulation"

            def OmniGraphNode "on_playback_tick" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                token node:type = "omni.graph.action.OnPlaybackTick"
                int node:typeVersion = 1
                custom double outputs:deltaSeconds = 0.03694700077176094
                custom double outputs:frame = 35686.203125
                custom uint outputs:tick = 0 (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom double outputs:time = 1486.9251708984375
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-398.55984, 250.92804)
            }

            def OmniGraphNode "isaac_read_lidar_beams_node" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom rel inputs:lidarPrim = </World/EMMA400K_body/base_link/Lidar>
                token node:type = "omni.isaac.range_sensor.IsaacReadLidarBeams"
                int node:typeVersion = 1
                custom float2 outputs:azimuthRange = (-1.553343, 1.5463618)
                custom float2 outputs:depthRange = (0.4, 50)
                custom uint outputs:execOut = 0 (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom float outputs:horizontalFov = 178
                custom float outputs:horizontalResolution = 0.4
                custom uchar[] outputs:intensitiesData
                custom float[] outputs:linearDepthData = [9.995083, 9.996545, 9.998493, 10.00093, 10.003858, 10.007274, 10.011179, 10.015577, 10.020469, 10.025852, 10.031732, 10.038108, 10.044981, 10.052354, 10.060229, 10.068607, 10.077491, 10.086882, 10.096783, 10.107198, 10.118126, 10.129573, 10.1415415, 10.154033, 10.167052, 10.1806, 10.194683, 10.209304, 10.224463, 10.24017, 10.256425, 10.273232, 10.290598, 10.308525, 10.32702, 10.346086, 10.365728, 10.385954, 10.406766, 10.428171, 10.450173, 10.472782, 10.495999, 10.519836, 10.544294, 10.569384, 10.595111, 10.621482, 10.648505, 10.6761875, 10.704538, 10.733565, 10.763274, 10.793676, 10.8247795, 7.421531, 7.301618, 7.185865, 7.074064, 6.9660234, 6.861565, 6.812012, 6.834836, 6.858147, 6.8819556, 6.9062676, 6.9310913, 6.9564342, 6.982305, 7.008711, 7.0356617, 7.063167, 7.0912356, 7.1198745, 11.610378, 11.658797, 11.708198, 11.758591, 11.81, 11.862439, 11.915931, 11.970492, 12.026144, 12.08291, 12.140805, 12.199857, 12.260086, 12.321519, 12.384173, 12.448078, 12.513262, 12.579748, 12.647561, 12.716737, 12.787297, 12.859276, 12.932702, 13.00761, 13.084032, 13.162004, 13.241559, 13.215899, 13.112387, 13.011108, 12.91201, 12.815029, 12.720111, 12.627196, 12.53624, 12.447184, 12.359985, 12.274591, 12.190958, 12.109046, 12.028807, 11.950203, 11.873196, 11.797746, 11.723819, 11.651376, 11.580382, 11.510804, 11.4426155, 11.375778, 11.3102665, 11.246052, 11.183101, 11.121392, 11.060897, 11.001587, 10.943443, 10.886437, 10.830548, 10.77575, 10.722024, 10.669353, 10.617706, 10.567072, 10.517429, 10.468757, 10.42104, 10.374258, 10.328398, 10.283437, 10.239367, 10.196165, 10.153818, 10.112314, 10.071635, 10.031771, 9.992705, 9.954427, 9.916922, 9.880178, 9.844181, 9.808924, 9.774394, 9.740579, 9.707468, 9.67505, 9.643319, 9.612261, 9.581868, 9.552131, 9.52304, 9.494587, 9.466764, 9.439563, 9.412974, 9.3869915, 9.361608, 9.336813, 9.312603, 9.288969, 9.265905, 9.243405, 9.221464, 9.200071, 9.179226, 9.15892, 9.139148, 9.1199045, 9.101186, 9.082984, 9.065297, 9.048118, 9.031443, 9.015268, 8.999589, 8.984403, 8.969703, 8.955486, 8.94175, 8.928492, 8.915705, 8.903389, 8.89154, 8.880154, 8.869228, 8.858762, 8.84875, 8.839192, 8.830084, 8.821425, 8.813211, 8.805441, 8.798115, 8.791226, 8.784779, 8.778767, 8.7731905, 8.768048, 8.763339, 8.759063, 8.755217, 8.751801, 8.748812, 8.746252, 8.74412, 8.742414, 8.741136, 8.740283, 8.739858, 8.739857, 8.740283, 8.741135, 8.7424135, 8.744119, 8.74625, 8.748809, 8.751796, 8.755213, 8.759059, 8.763337, 8.768045, 8.773187, 8.778762, 8.784774, 8.791222, 8.798107, 8.805435, 8.813205, 8.821417, 8.830077, 8.839185, 8.8487425, 8.858754, 8.86922, 8.880145, 8.89153, 8.903379, 8.915694, 8.928481, 8.94174, 8.955476, 8.969691, 8.984389, 8.9995775, 9.015256, 9.031429, 9.048104, 9.065282, 9.08297, 9.101171, 9.11989, 9.139133, 9.158904, 3.7505064, 3.6707773, 3.5945399, 3.5215714, 3.4516718, 3.3846543, 3.3203492, 3.2585788, 3.1992354, 3.1421654, 3.1231515, 3.131973, 3.140998, 3.1502295, 3.1596696, 3.1693218, 3.1791883, 3.1892717, 3.1995766, 3.210105, 3.2208605, 3.2318459, 3.2430656, 3.2545226, 3.2662206, 3.278163, 3.2903545, 3.3027978, 3.3154986, 3.32846, 3.341687, 3.355183, 3.3689537, 3.3830035, 3.3973374, 3.41196, 3.4268773, 10.374221, 10.421003, 10.46872, 10.517391, 10.567034, 10.617666, 10.669311, 10.721984, 10.775708, 10.830505, 10.886392, 10.943398, 11.001542, 11.06085, 11.1213455, 11.183053, 11.246002, 11.31022, 11.375728, 11.442563, 11.510754, 11.580325, 11.6513195, 11.7237625, 11.797688, 11.873138, 11.950143, 12.028748, 12.108981, 12.190892, 12.274523, 12.359916, 12.447119, 12.53617, 12.627127, 12.72004, 12.814958, 12.911937, 13.011033, 13.112307, 13.215819, 13.232336, 13.152834, 13.074917, 12.998547, 12.923689, 12.850311, 12.77838, 12.7078705, 12.638744, 12.570973, 12.504536, 12.439399, 12.375538, 12.312923, 12.2515335, 12.191345, 12.132332, 12.074475, 12.017751, 11.962134, 11.907611, 11.854156, 11.801752, 11.75038, 11.700021, 11.650657, 11.602269, 11.554845, 11.508365, 11.4628105, 11.418173, 11.3744335, 11.331578, 11.289593, 11.248461, 11.208177, 11.168719, 11.130081, 11.092247, 11.055205, 11.018948, 10.983458, 10.94873, 10.91475, 10.88151, 10.848998, 10.817206, 10.786124, 10.755742, 10.726053, 10.697047, 10.668716, 10.641053, 10.614048, 10.587693, 10.561986, 10.536913, 10.51247, 10.48865, 10.465447, 10.442855, 10.420865, 10.399476, 10.378677, 10.358468, 10.338837, 10.319784, 10.301302, 10.283387, 10.266032, 10.249236, 10.232992, 10.217297, 10.202146, 10.187535, 10.173464, 10.159924, 10.146913, 10.134431, 10.12247, 10.111031, 10.100108, 10.089702, 10.079806, 10.070421, 10.061543, 10.053169, 10.045301, 10.037932, 10.031063, 10.024692, 10.018816, 10.013435, 10.008547, 10.004153, 10.000248, 9.996835, 9.99391, 9.991472, 9.989525]
                custom int outputs:numCols = 445
                custom int outputs:numRows = 1
                custom float outputs:rotationRate = 20
                custom float outputs:verticalFov = 30
                custom float outputs:verticalResolution = 4
                custom float2 outputs:zenithRange = (-0.2617994, -0.2617994)
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (297.1188, -69.57376)
            }

            def OmniGraphNode "ros1_publish_laser_scan" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom float2 inputs:azimuthRange = (0, 0)
                prepend float2 inputs:azimuthRange.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:azimuthRange>
                custom float2 inputs:depthRange = (0, 0)
                prepend float2 inputs:depthRange.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:depthRange>
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:execOut>
                custom string inputs:frameId = "laser_link"
                custom float inputs:horizontalFov = 0
                prepend float inputs:horizontalFov.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:horizontalFov>
                custom float inputs:horizontalResolution = 0
                prepend float inputs:horizontalResolution.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:horizontalResolution>
                custom uchar[] inputs:intensitiesData = []
                prepend uchar[] inputs:intensitiesData.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:intensitiesData>
                custom float[] inputs:linearDepthData = []
                prepend float[] inputs:linearDepthData.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:linearDepthData>
                custom string inputs:nodeNamespace = ""
                custom int inputs:numCols = 0
                prepend int inputs:numCols.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:numCols>
                custom int inputs:numRows = 0
                prepend int inputs:numRows.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:numRows>
                custom uint64 inputs:queueSize = 10
                custom float inputs:rotationRate = 0
                prepend float inputs:rotationRate.connect = </World/EMMA400K_body/ActionGraph/isaac_read_lidar_beams_node.outputs:rotationRate>
                custom double inputs:timeStamp = 0
                prepend double inputs:timeStamp.connect = </World/EMMA400K_body/ActionGraph/isaac_read_system_time.outputs:systemTime>
                custom string inputs:topicName = "scan_emma_nav_front"
                token node:type = "omni.isaac.ros_bridge.ROS1PublishLaserScan"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (891.24097, -179.96738)
            }

            def OmniGraphNode "ros1_publish_clock" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom string inputs:nodeNamespace = ""
                custom uint64 inputs:queueSize = 10
                custom double inputs:timeStamp = 0
                prepend double inputs:timeStamp.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:time>
                custom string inputs:topicName = "clock"
                token node:type = "omni.isaac.ros_bridge.ROS1PublishClock"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-134.56311, -0.31354523)
            }

            def OmniGraphNode "ros1_publish_imu" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom vector3d inputs:angularVelocity = (0, 0, 0)
                prepend vector3d inputs:angularVelocity.connect = </World/EMMA400K_body/ActionGraph/isaac_read_imu_node.outputs:angVel>
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_read_imu_node.outputs:execOut>
                custom string inputs:frameId = "imu_link"
                custom vector3d inputs:linearAcceleration = (0, 0, 0)
                prepend vector3d inputs:linearAcceleration.connect = </World/EMMA400K_body/ActionGraph/isaac_read_imu_node.outputs:linAcc>
                custom string inputs:nodeNamespace = ""
                custom quatd inputs:orientation = (1, 0, 0, 0)
                prepend quatd inputs:orientation.connect = </World/EMMA400K_body/ActionGraph/isaac_read_imu_node.outputs:orientation>
                custom bool inputs:publishAngularVelocity = 1
                custom bool inputs:publishLinearAcceleration = 1
                custom bool inputs:publishOrientation = 1
                custom uint64 inputs:queueSize = 10
                custom double inputs:timeStamp = 0
                prepend double inputs:timeStamp.connect = </World/EMMA400K_body/ActionGraph/isaac_read_system_time.outputs:systemTime>
                custom string inputs:topicName = "jzhw/imu"
                token node:type = "omni.isaac.ros_bridge.ROS1PublishImu"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (1322.6824, 235.21051)
            }

            def OmniGraphNode "isaac_read_imu_node" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom rel inputs:imuPrim = </World/EMMA400K_body/base_link/Imu_Sensor>
                token node:type = "omni.isaac.sensor.IsaacReadIMU"
                int node:typeVersion = 1
                custom vector3d outputs:angVel = (-0.0006328143063001335, -0.00037030945532023907, -0.000007740730325167533)
                custom uint outputs:execOut = 1 (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom vector3d outputs:linAcc = (-0.001901696203276515, -0.058504387736320496, 9.79875659942627)
                custom quatd outputs:orientation = (1, -0.000015237606930895709, 7.153228409606527e-8, 5.7622528970568965e-8)
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (697.78033, 278.77542)
            }

            def OmniGraphNode "ros1_subscribe_twist" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom string inputs:nodeNamespace = ""
                custom uint64 inputs:queueSize = 1
                custom string inputs:topicName = "/cmd_vel"
                token node:type = "omni.isaac.ros_bridge.ROS1SubscribeTwist"
                int node:typeVersion = 1
                custom vector3d outputs:angularVelocity = (0, 0, 0)
                custom uint outputs:execOut = 0 (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom vector3d outputs:linearVelocity = (0, 0, 0)
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-103.57977, 560.0024)
            }

            def OmniGraphNode "break_3_vector" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom double3 __resolved_inputs:tuple = (0, 0, 0)
                custom double __resolved_outputs:x = 0
                custom double __resolved_outputs:y = 0
                custom double __resolved_outputs:z = 0
                custom token inputs:tuple = ""
                prepend token inputs:tuple.connect = </World/EMMA400K_body/ActionGraph/ros1_subscribe_twist.outputs:angularVelocity>
                token node:type = "omni.graph.nodes.BreakVector3"
                int node:typeVersion = 1
                custom token outputs:x
                custom token outputs:y
                custom token outputs:z
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (167.47049, 634.66876)
            }

            def OmniGraphNode "break_3_vector_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom double3 __resolved_inputs:tuple = (0, 0, 0)
                custom double __resolved_outputs:x = 0
                custom double __resolved_outputs:y = 0
                custom double __resolved_outputs:z = 0
                custom token inputs:tuple = ""
                prepend token inputs:tuple.connect = </World/EMMA400K_body/ActionGraph/ros1_subscribe_twist.outputs:linearVelocity>
                token node:type = "omni.graph.nodes.BreakVector3"
                int node:typeVersion = 1
                custom token outputs:x
                custom token outputs:y
                custom token outputs:z
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (160.39964, 898.64655)
            }

            def OmniGraphNode "differential_controller" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom double inputs:angularVelocity = 0
                prepend double inputs:angularVelocity.connect = </World/EMMA400K_body/ActionGraph/break_3_vector.outputs:z>
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/ros1_subscribe_twist.outputs:execOut>
                custom double inputs:linearVelocity = 0
                prepend double inputs:linearVelocity.connect = </World/EMMA400K_body/ActionGraph/break_3_vector_01.outputs:x>
                custom double inputs:maxAngularSpeed = 0
                custom double inputs:maxLinearSpeed = 2
                custom double inputs:maxWheelSpeed = 0
                custom double inputs:wheelDistance = 0.52
                custom double inputs:wheelRadius = 0.09
                token node:type = "omni.isaac.wheeled_robots.DifferentialController"
                int node:typeVersion = 1
                custom double[] outputs:effortCommand
                custom double[] outputs:positionCommand
                custom double[] outputs:velocityCommand = [0, 0]
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (455.38495, 999.2566)
                token visibility = "invisible"
            }

            def OmniGraphNode "constant_token" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom token inputs:value = "wheel_left"
                token node:type = "omni.graph.nodes.ConstantToken"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (335.5554, 407.65128)
            }

            def OmniGraphNode "constant_token_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom token inputs:value = "wheel_right"
                token node:type = "omni.graph.nodes.ConstantToken"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (391.5661, 599.76056)
            }

            def OmniGraphNode "articulation_controller" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom double[] inputs:effortCommand
                custom uint inputs:execIn = 0
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom int[] inputs:jointIndices
                custom token[] inputs:jointNames = []
                prepend token[] inputs:jointNames.connect = </World/EMMA400K_body/ActionGraph/make_array.outputs:array>
                custom double[] inputs:positionCommand
                custom string inputs:robotPath
                custom rel inputs:targetPrim = </World/EMMA400K_body>
                custom bool inputs:usePath = 0
                custom double[] inputs:velocityCommand = []
                prepend double[] inputs:velocityCommand.connect = </World/EMMA400K_body/ActionGraph/differential_controller.outputs:velocityCommand>
                token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (970.15735, 701.86017)
            }

            def OmniGraphNode "isaac_read_system_time" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom int64 inputs:swhFrameNumber = 0
                token node:type = "omni.isaac.core_nodes.IsaacReadSystemTime"
                int node:typeVersion = 1
                custom double outputs:systemTime
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-581.42346, 549.50037)
            }

            def OmniGraphNode "isaac_compute_odometry_node" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom rel inputs:chassisPrim
                delete rel inputs:chassisPrim = [
                    </World/car/car_body>,
                    </World/EMMA400K1>,
                ]
                prepend rel inputs:chassisPrim = </World/EMMA400K_body>
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                token node:type = "omni.isaac.core_nodes.IsaacComputeOdometry"
                int node:typeVersion = 1
                custom vector3d outputs:angularAcceleration = (0, 0, 0)
                custom vector3d outputs:angularVelocity = (0, 0, 0)
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom vector3d outputs:linearAcceleration = (0, 0, 0)
                custom vector3d outputs:linearVelocity = (0, 0, 0)
                custom quatd outputs:orientation = (1, 0, 0, 0)
                custom vector3d outputs:position = (0, 0, 0)
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1115.4371, 609.5238)
            }

            def OmniGraphNode "ros1_publish_odometry" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom vector3d inputs:angularVelocity = (0, 0, 0)
                prepend vector3d inputs:angularVelocity.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:angularVelocity>
                custom string inputs:chassisFrameId = "base_footprint"
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:execOut>
                custom vector3d inputs:linearVelocity = (0, 0, 0)
                prepend vector3d inputs:linearVelocity.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:linearVelocity>
                custom string inputs:nodeNamespace = ""
                custom string inputs:odomFrameId = "odom_wheel"
                custom quatd inputs:orientation = (1, 0, 0, 0)
                prepend quatd inputs:orientation.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:orientation>
                custom vector3d inputs:position = (0, 0, 0)
                prepend vector3d inputs:position.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:position>
                custom uint64 inputs:queueSize = 10
                custom vector3d inputs:robotFront = (1, 0, 0)
                custom double inputs:timeStamp = 0
                prepend double inputs:timeStamp.connect = </World/EMMA400K_body/ActionGraph/isaac_read_system_time.outputs:systemTime>
                custom string inputs:topicName = "emma_odom"
                token node:type = "omni.isaac.ros_bridge.ROS1PublishOdometry"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-432.4544, 706.80853)
            }

            def OmniGraphNode "ros1_publish_raw_transform_tree" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom string inputs:childFrameId = "base_link"
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:execOut>
                custom string inputs:nodeNamespace = ""
                custom string inputs:parentFrameId = "odom"
                custom uint64 inputs:queueSize = 10
                custom quatd inputs:rotation = (1, 0, 0, 0)
                prepend quatd inputs:rotation.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:orientation>
                custom double inputs:timeStamp = 0
                prepend double inputs:timeStamp.connect = </World/EMMA400K_body/ActionGraph/isaac_read_system_time.outputs:systemTime>
                custom string inputs:topicName = "/tf"
                custom vector3d inputs:translation = (0, 0, 0)
                prepend vector3d inputs:translation.connect = </World/EMMA400K_body/ActionGraph/isaac_compute_odometry_node.outputs:position>
                token node:type = "omni.isaac.ros_bridge.ROS1PublishRawTransformTree"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-469.72104, 1173.1534)
            }

            def OmniGraphNode "make_array" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom int inputs:arraySize = 2
                custom token inputs:arrayType = "auto" (
                    allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
                )
                custom token inputs:input0
                delete token inputs:input0.connect = </World/EMMA400K_body/ActionGraph/constant_token.inputs:value>
                prepend token inputs:input0.connect = </World/EMMA400K_body/ActionGraph/constant_token.inputs:value>
                custom token inputs:input1 (
                    customData = {
                        string ExtendedAttributeType = "Any"
                        dictionary omni = {
                            dictionary graph = {
                                string attrType = "Any"
                            }
                        }
                    }
                )
                delete token inputs:input1.connect = </World/EMMA400K_body/ActionGraph/constant_token_01.inputs:value>
                prepend token inputs:input1.connect = </World/EMMA400K_body/ActionGraph/constant_token_01.inputs:value>
                token node:type = "omni.graph.nodes.ConstructArray"
                int node:typeVersion = 1
                custom token outputs:array
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (710.3658, 546.0022)
            }

            def OmniGraphNode "isaac_create_viewport" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/on_playback_tick.outputs:tick>
                custom token inputs:name = ""
                custom uint inputs:viewportId = 0
                token node:type = "omni.isaac.core_nodes.IsaacCreateViewport"
                int node:typeVersion = 2
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom token outputs:viewport
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (76.90741, 1350.3494)
            }

            def OmniGraphNode "ros1_camera_helper" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom bool inputs:enableSemanticLabels = 0
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_set_camera_01.outputs:execOut>
                custom string inputs:frameId = "camera_jz_down"
                custom string inputs:nodeNamespace = ""
                custom uint64 inputs:queueSize = 10
                custom token inputs:renderProductPath = ""
                prepend token inputs:renderProductPath.connect = </World/EMMA400K_body/ActionGraph/isaac_get_viewport_render_product.outputs:renderProductPath>
                custom string inputs:semanticLabelsTopicName = "semantic_labels"
                custom float2 inputs:stereoOffset = (0, 0)
                custom string inputs:topicName = "/cam_bottom_docking_rgb"
                custom token inputs:type = "rgb" (
                    allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                )
                custom token inputs:viewport = ""
                token node:type = "omni.isaac.ros_bridge.ROS1CameraHelper"
                int node:typeVersion = 2
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (1258.9285, 1391.7135)
            }

            def OmniGraphNode "isaac_get_viewport_render_product" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_create_viewport.outputs:execOut>
                custom token inputs:viewport = ""
                prepend token inputs:viewport.connect = </World/EMMA400K_body/ActionGraph/isaac_create_viewport.outputs:viewport>
                token node:type = "omni.isaac.core_nodes.IsaacGetViewportRenderProduct"
                int node:typeVersion = 1
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom token outputs:renderProductPath
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (449.9941, 1368.8152)
            }

            def OmniGraphNode "isaac_set_camera_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom rel inputs:cameraPrim
                prepend rel inputs:cameraPrim = </World/EMMA400K_body/base_link/car_camera>
                custom uint inputs:execIn
                prepend uint inputs:execIn.connect = </World/EMMA400K_body/ActionGraph/isaac_get_viewport_render_product.outputs:execOut>
                custom token inputs:renderProductPath = ""
                prepend token inputs:renderProductPath.connect = </World/EMMA400K_body/ActionGraph/isaac_get_viewport_render_product.outputs:renderProductPath>
                token node:type = "omni.isaac.core_nodes.IsaacSetCameraOnRenderProduct"
                int node:typeVersion = 1
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (915.01556, 1350.705)
            }
        }
    }

    def Xform "PaintTool"
    {
        def Xform "cube_03fc9"
        {
            def PointInstancer "pointInstancer"
            {
                quath[] orientations = []
                point3f[] positions = []
                int[] protoIndices = []
                prepend rel prototypes = </World/PaintTool/cube_03fc9/pointInstancer/asset>
                float3[] scales = []

                def Xform "asset" (
                    kind = "component"
                    prepend references = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Assets/Extensions/Samples/Paint/cube.usd@
                )
                {
                    double3 up_rot_axis = (0, 1, 0)
                }
            }
        }
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def DistantLight "DistantLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

